linuxkit_pkg_build: &linuxkit_pkg_build
  docker:
    - image: debian:stretch
  steps:
    - run:
        name: Configure $PATH
        command: echo 'export PATH=/workspace/bin:$PATH' >> $BASH_ENV
    - run:
        name: Install packages
        # ca-certificates are needed for attach_workspace (and git over https)
        command: apt-get update && apt-get install -y ca-certificates git openssh-client
    - attach_workspace:
        at: /workspace
    - checkout
    - setup_remote_docker:
        version: 17.06.1-ce
    - run:
        name: Docker version
        command: |
          docker version
    - run:
        name: Building package
        command: |
          PKG=${CIRCLE_JOB#pkg-}
          mkdir /workspace/packages
          linuxkit pkg build pkg/$PKG
          linuxkit pkg show-tag pkg/$PKG > /workspace/packages/$PKG.tag
          echo
          docker image ls --all
          docker image save -o /workspace/packages/$PKG.tar linuxkit/$PKG
    - persist_to_workspace:
        root: /workspace
        paths: packages

image_build: &image_build
  docker:
    - image: debian:stretch
  steps:
    - run:
        name: Configure $PATH
        command: echo 'export PATH=/workspace/bin:$PATH' >> $BASH_ENV
    - run:
        name: Install packages
        # ca-certificates are needed for attach_workspace (and git over https)
        command: apt-get update && apt-get install -y ca-certificates curl git make openssh-client
    - attach_workspace:
        at: /workspace
    - checkout
    - setup_remote_docker:
        version: 17.06.1-ce
    - run:
        name: Importing packages from workspace
        command: |
          load() {
              local pkg=$1
              docker image load --input /workspace/packages/${pkg}.tar

              # Retag to avoid content trust for unpushed images
              local tag=$(cat /workspace/packages/${pkg}.tag)
              docker image tag ${tag} linuxkitcircleci/${pkg}:ci
              sed -i -e "s,image: ${tag}$,image: linuxkitcircleci/${pkg}:ci,g" yml/*.yml
          }

          load kubelet
          case "$KUBE_RUNTIME" in
          docker)
              load kubernetes-docker-image-cache-common
              load kubernetes-docker-image-cache-control-plane
              ;;
          cri-containerd)
              load cri-containerd
              ;;
          *)
              echo "Unknown $KUBE_RUNTIME"
              exit 1
              ;;
          esac
          echo
          docker image ls --all
          echo
          git --no-pager diff
    - run:
        name: Build images
        command: |
          mkdir -p /workspace/images/kube-$KUBE_RUNTIME-$KUBE_NETWORK
          make KUBE_FORMATS="iso-bios" master node
          mv kube-master*.iso kube-node*.iso /workspace/images/kube-$KUBE_RUNTIME-$KUBE_NETWORK
    - persist_to_workspace:
        root: /workspace
        paths: images

image_boot: &image_boot
  machine:
    enabled: true
    image: circleci/classic:latest # default Ubuntu 14.04 image
  steps:
    - run:
        name: Configure $PATH
        command: echo 'export PATH=/workspace/bin:$PATH' >> $BASH_ENV
    - run:
        name: Install packages
        # ca-certificates are needed for attach_workspace (and git over https)
        command: apt-get update && apt-get install -y ca-certificates curl expect git make openssh-client procps qemu xorriso
    - attach_workspace:
        at: /workspace
    - checkout
    - run:
        name: Test boot
        command: |
          # Add ssh keys to the image.
          # TODO could this be integrated into linuxkit/mkimage-iso-*
          # such that all those options do not need to be repeated
          # here? e.g. perhaps this could be made to work:
          # - Create tar with /root/.ssh/authorized_keys=/workspace/ssh/id_rsa.pub in it
          # - cat $tar | docker run -v /workspace/images/kube-$KUBE_RUNTIME-$KUBE_NETWORK/kube-master.iso:/input.iso linuxkit/mkimage-iso-bios -add-to /input.iso
          #
          # Compared with the options used i nmkimage-iso-bios to
          # build the original dropped -J -joliet-long since xorriso
          # is more particular about it than genisoimage producing
          # lots of:
          #
          #   Cannot add /bin/ls to Joliet tree. Symlinks can only be added to a Rock Ridge tree.

          xorriso -indev /workspace/images/kube-$KUBE_RUNTIME-$KUBE_NETWORK/kube-master.iso \
                  -outdev kube-master.iso \
                  -as genisoimage \
                    -l -R \
                    -c isolinux/boot.cat \
                    -b isolinux/isolinux.bin \
                    -no-emul-boot \
                    -boot-load-size 4 \
                    -boot-info-table \
                    -input-charset utf8 \
                  -- \
                  -pathspecs on \
                  -add /root/.ssh/authorized_keys=/workspace/ssh/id_rsa.pub

          #cp /workspace/images/kube-$KUBE_RUNTIME-$KUBE_NETWORK/kube-{master,node}.iso .
          #cp /workspace/images/kube-$KUBE_RUNTIME-$KUBE_NETWORK/kube-master.iso .
          SSHOPTS="-i /workspace/ssh/id_rsa" ./test.exp

version: 2
jobs:
  dependencies:
    docker:
      - image: debian:stretch
    steps:
      - run:
          name: Create workspace
          command: mkdir -p /workspace/bin
      - run:
          name: Install packages
          command: apt-get update && apt-get install -y ca-certificates curl openssh-client
      - run:
          name: Fetch binaries
          command: |
            curl -fsSL -o /tmp/docker.tgz https://download.docker.com/linux/static/stable/x86_64/docker-17.06.2-ce.tgz
            tar xfO /tmp/docker.tgz docker/docker > /workspace/bin/docker
            curl -fsSL -o /workspace/bin/linuxkit https://362-46932243-gh.circle-artifacts.com/0/linuxkit-linux-amd64
            curl -fsSL -o /workspace/bin/manifest-tool https://github.com/estesp/manifest-tool/releases/download/v0.7.0/manifest-tool-linux-amd64
            curl -fsSL -o /workspace/bin/notary https://github.com/theupdateframework/notary/releases/download/v0.4.3/notary-Linux-amd64

            echo "Downloaded:"
            sha256sum /workspace/bin/*
            echo

            echo "Checking checksums"
            sha256sum -c <<EOF
            6af40e74b2dbb2927882acab52d50bfc72551779d541957fc70b6adc325ee5ef  /workspace/bin/docker
            b61188823c2491e9a1c16d275e41c68d5736f3f10577d01cb358261ff71bbad6  /workspace/bin/linuxkit
            e4ca2ef0015a4be8597d31d9e3e70d88da33924ae72b0999e9f3b79304d4710d  /workspace/bin/manifest-tool
            06cd02c4c2e7a3b1ad9899b03b3d4dde5392d964c675247d32f604a24661f839  /workspace/bin/notary
            EOF
      - run:
          name: Generate SSH Keys
          command: |
            mkdir -p /workspace/ssh
            ssh-keygen -f /workspace/ssh/id_rsa -C "ephemeral CI ssh key" -N ''
      - run:
          name: Versions
          command: |
             chmod +x /workspace/bin/docker # docker version deferred until daemon configured in relevant jobs
             chmod +x /workspace/bin/linuxkit && /workspace/bin/linuxkit version
             chmod +x /workspace/bin/manifest-tool && /workspace/bin/manifest-tool --version
             chmod +x /workspace/bin/notary && /workspace/bin/notary version
      - persist_to_workspace:
          root: /workspace
          paths: bin
      - persist_to_workspace:
          root: /workspace
          paths: ssh

  lint:
    docker:
      - image: debian:stretch
    steps:
      - run:
          name: Configure $PATH
          command: echo 'export PATH=/workspace/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install packages
          # ca-certificates are needed for attach_workspace (and git over https)
          command: apt-get update && apt-get install -y ca-certificates git make openssh-client
      - attach_workspace:
          at: /workspace
      - setup_remote_docker:
          version: 17.06.1-ce
      - run:
          name: Docker version
          command: |
            docker version
      - checkout
      - run:
          name: Check YML hashes
          command: |
            # Check yml hashes are up to date.
            make update-hashes
            if ! git diff --exit-code ; then
                echo ""
                echo "*** Hashes are not up to date."
                exit 1
            fi
      - run:
          name: Check image-cache similarity
          command: |
            kdicc=pkg/kubernetes-docker-image-cache-common
            kdiccp=pkg/kubernetes-docker-image-cache-control-plane
            # Check that the image cache build files have not drifted apart
            if ! diff $kdicc/Dockerfile $kdiccp/Dockerfile ; then
                echo ""
                echo "*** image-cache Dockerfiles do not match."
                exit 1
            fi
            # These differ in one expected way, the name
            sed -e 's/^image: kubernetes-docker-image-cache-common$/image: kubernetes-docker-image-cache/' <$kdicc/build.yml >$kdicc/build.yml.for-lint
            sed -e 's/^image: kubernetes-docker-image-cache-control-plane$/image: kubernetes-docker-image-cache/' <$kdiccp/build.yml >$kdiccp/build.yml.for-lint
            if ! diff $kdicc/build.yml.for-lint $kdiccp/build.yml.for-lint ; then
                echo ""
                echo "*** image-cache build.yml files do not match."
                exit 1
            fi
            rm -f $kdicc/build.yml.for-lint $kdiccp/build.yml.for-lint
      - run:
          # This one potentially does a lot of docker pull, leave it until last.
          name: Check image cache images
          command: |
            # Check pkg/kubernetes-docker-image-cache-*/image.lst are up to date
            make refresh-image-caches
            if ! git diff --exit-code ; then
                echo ""
                echo "*** image cache lists are not up to date."
                exit 1
            fi

  pkg-kubelet:
    <<: *linuxkit_pkg_build
  pkg-cri-containerd:
    <<: *linuxkit_pkg_build
  pkg-kube-e2e-test:
    <<: *linuxkit_pkg_build

  pkg-kubernetes-docker-image-cache-common:
    <<: *linuxkit_pkg_build
  pkg-kubernetes-docker-image-cache-control-plane:
    <<: *linuxkit_pkg_build

  image-docker-weave:
    <<: *image_build
    # Needs to be configured/enabled by CircleCI person
    #resource_class: large
    environment:
      - KUBE_RUNTIME: docker
      - KUBE_NETWORK: weave
  image-docker-bridge:
    <<: *image_build
    # Needs to be configured/enabled by CircleCI person
    #resource_class: large
    environment:
      - KUBE_RUNTIME: docker
      - KUBE_NETWORK: bridge

  image-cri-containerd-weave:
    <<: *image_build
    environment:
      - KUBE_RUNTIME: cri-containerd
      - KUBE_NETWORK: weave
  image-cri-containerd-bridge:
    <<: *image_build
    environment:
      - KUBE_RUNTIME: cri-containerd
      - KUBE_NETWORK: bridge

  boot-docker-weave:
    <<: *image_boot
    environment:
      - KUBE_RUNTIME: docker
      - KUBE_NETWORK: weave

  #boot-docker-bridge:
  #  <<: *image_boot
  #  environment:
  #    - KUBE_RUNTIME: docker
  #    - KUBE_NETWORK: bridge

  #boot-cri-containerd-weave:
  #  <<: *image_boot
  #  environment:
  #    - KUBE_RUNTIME: cri-containerd
  #    - KUBE_NETWORK: weave

  boot-cri-containerd-bridge:
    <<: *image_boot
    environment:
      - KUBE_RUNTIME: cri-containerd
      - KUBE_NETWORK: bridge

  push-pkgs-to-hub:
    docker:
      - image: debian:stretch
    steps:
      - run:
          name: Configure $PATH
          command: echo 'export PATH=/workspace/bin:$PATH' >> $BASH_ENV
      - run:
          name: Install packages
          # ca-certificates are needed for attach_workspace (and git over https)
          command: apt-get update && apt-get install -y ca-certificates expect git jq openssh-client
      - attach_workspace:
          at: /workspace
      - checkout
      - setup_remote_docker:
          version: 17.06.1-ce
      - run:
          name: Docker version
          command: |
            docker version
      - run:
          name: Import packages from workspace
          command: |
            for pkg in /workspace/packages/*.tar ; do
               docker image load --input $pkg
            done
            echo
            docker image ls --all
      - run:
          name: Push packages
          command: |
            # PRs from forks do not have access to the necessary secrets to do the push.
            if [ -z "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE" ] ; then
                echo "DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE not set (likely this is a PR from a fork)."
                echo "No credentials available, not pushing to hub."
                exit 0
            fi

            docker login -u $DOCKER_USER -p $DOCKER_PASS
            mkdir -p ~/.docker/trust/private
            cp .circleci/content-trust.key ~/.docker/trust/private/b056f84873aa0be205dfe826afa6e7458120c9569dd19a2a84154498fb1165d5.key

            linuxkit pkg push --nobuild pkg/kubelet
            linuxkit pkg push --nobuild pkg/cri-containerd
            linuxkit pkg push --nobuild pkg/kube-e2e-test
            linuxkit pkg push --nobuild pkg/kubernetes-docker-image-cache-common
            linuxkit pkg push --nobuild pkg/kubernetes-docker-image-cache-control-plane

workflows:
  version: 2
  build:
    jobs:
      - dependencies
      - lint:
          requires:
            - dependencies

      - pkg-kubelet:
          requires:
            - dependencies
      - pkg-cri-containerd:
          requires:
            - dependencies
      - pkg-kube-e2e-test:
          requires:
            - dependencies
      - pkg-kubernetes-docker-image-cache-common:
          requires:
            - dependencies
      - pkg-kubernetes-docker-image-cache-control-plane:
          requires:
            - dependencies

      - image-docker-weave:
          requires:
            - dependencies
            - pkg-kubelet
            - pkg-kubernetes-docker-image-cache-common
            - pkg-kubernetes-docker-image-cache-control-plane
      - image-docker-bridge:
          requires:
            - dependencies
            - pkg-kubelet
            - pkg-kubernetes-docker-image-cache-common
            - pkg-kubernetes-docker-image-cache-control-plane
      - image-cri-containerd-weave:
          requires:
            - dependencies
            - pkg-kubelet
            - pkg-cri-containerd
      - image-cri-containerd-bridge:
          requires:
            - dependencies
            - pkg-kubelet
            - pkg-cri-containerd

      - boot-docker-weave:
          requires:
            - image-docker-weave

      #- boot-docker-bridge:
      #    requires:
      #      - image-docker-bridge

      #- boot-cri-containerd-weave:
      #    requires:
      #      - image-cri-containerd-weave

      - boot-cri-containerd-bridge:
          requires:
            - image-cri-containerd-bridge

      - push-pkgs-to-hub:
          # We want everything to have passed, which is a bit
          # tedious. Some of these are already covered transitively,
          # but be more explicit.
          requires:
            - lint
            - pkg-kubelet
            - pkg-cri-containerd
            - pkg-kube-e2e-test
            - pkg-kubernetes-docker-image-cache-common
            - pkg-kubernetes-docker-image-cache-control-plane
            - image-docker-weave
            - image-docker-bridge
            - image-cri-containerd-weave
            - image-cri-containerd-bridge
            - boot-docker-weave
            #- boot-docker-bridge
            #- boot-cri-containerd-weave
            - boot-cri-containerd-bridge
